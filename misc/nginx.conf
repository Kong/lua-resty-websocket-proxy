daemon off;
master_process off;
worker_processes 1;
error_log /dev/stderr debug;

events {}

http {
    access_log off;
    lua_package_path '../lib/?.lua;../lua-resty-websocket/lib/?.lua;;';
    lua_socket_log_errors off;

    upstream ws_server {
        server 127.0.0.1:9001;
    }

    server {
        listen 9000;

        location ~ ^/(?<path>.*) {
            rewrite_by_lua_block {
                local ws_proxy = require "resty.websocket.proxy"
                local proxy, err

                proxy = ngx.ctx.proxy
                if proxy == nil then
                    proxy, err = ws_proxy.new({
                        upstream = "ws://127.0.0.1:9001",
                        debug = true,
                    })
                    if not proxy then
                        ngx.log(ngx.ERR, "failed to create proxy: ", err)
                        return ngx.exit(444)
                    end

                    ngx.ctx.proxy = proxy
                end

                proxy:execute()
            }

            #proxy_pass          http://ws_server/$path;
            #proxy_http_version  1.1;
            #proxy_set_header    Connection 'upgrade';
            #proxy_set_header    Upgrade    'websocket';
        }
    }

    server {
        listen 9001;

        location / {
            content_by_lua_block {
                local ws_server = require "resty.websocket.server"
                local server, err

                server = ngx.ctx.server
                if server == nil then
                    server, err = ws_server:new()
                    if not server then
                        ngx.log(ngx.ERR, "failed to create server: ", err)
                        return ngx.exit(444)
                    end

                    ngx.ctx.server = server
                end

                while true do
                    local data, typ, err = server:recv_frame()
                    if not data then
                        if not string.find(err, "closed", 1, true)
                          and not string.find(err, "timeout", 1, true)
                        then
                            ngx.log(ngx.ERR, "failed to receive a frame: ", err)
                        else
                            ngx.log(ngx.DEBUG, err)
                        end

                        return ngx.exit(444)
                    end

                    ngx.log(ngx.INFO, "received a frame of type \"", typ,
                                      "\" and payload \"",
                                      data and string.gsub(data, "\n", "\\n")
                                      or "", "\"")

                    if typ == "close" then
                        return

                    elseif typ == "ping" then
                        local bytes, err = server:send_pong(data)
                        if not bytes then
                            ngx.log(ngx.ERR, "failed to send frame: ", err)
                            return
                        end

                    elseif typ == "pong" then
                        -- NOP

                    elseif typ == "text" then
                        local bytes, err = server:send_text("hello from server")
                        if not bytes then
                            ngx.log(ngx.ERR, "failed to send frame: ", err)
                            return ngx.exit(444)
                        end

                    else
                        ngx.log(ngx.EMERG, "NYI - frame type \"", typ, "\"")
                    end
                end
            }
        }
    }
}
